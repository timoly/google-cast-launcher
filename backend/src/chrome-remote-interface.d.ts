// Type definitions for chrome-remote-interface 0.27
// Project: https://github.com/cyrus-and/chrome-remote-interface
// Definitions by: Juny <https://github.com/ka2jun8>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/** Declaration file originally generated by dts-gen */
declare module 'chrome-remote-interface' {
  type Callback = (...args: any[]) => void

  interface Sink {
    sinkNames: string[]
  }

  interface Cast {
    enable(): Promise<void>
    issueUpdated(cb: (msg: string) => void): void
    sinksUpdated(cb: (sinks: Sink) => void): void
    setSinkToUse(params: { sinkName: string }): void
  }

  interface Client {
    Cast: Cast
    close: () => Promise<void>
  }

  function CDP (
    options?: ChromeRemoteInterfaceOptions | Callback,
    callback?: Callback
  ): Promise<Client>

  namespace CDP {
    function Activate (
      options: TargetOptions,
      callback: (err: Error) => void
    ): void
    function Activate (options?: TargetOptions): Promise<void>

    function List (
      options: ListTargetOptions,
      callback: (err: Error, targets: Target[]) => Target[]
    ): Target[]
    function List (options?: ListTargetOptions): Promise<Target[]>

    function Close (
      options: TargetOptions,
      callback: (err: Error) => void
    ): void
    function Close (options?: TargetOptions): Promise<void>

    function New (
      options: NewTargetOptions,
      callback: (err: Error, target: Target) => Target
    ): Target
    function New (options?: NewTargetOptions): Promise<Target>
    function Protocol (
      options: ProtocolOptions,
      callback: (err: Error, protocol: DevtoolsProtocol) => DevtoolsProtocol
    ): DevtoolsProtocol
    function Protocol (options?: ProtocolOptions): Promise<DevtoolsProtocol>
    function Version (
      options: VersionOptions,
      callback: (err: Error, browserVersion: VersionResult) => void
    ): VersionResult
    function Version (options?: VersionOptions): Promise<VersionResult>
  }
  export = CDP

  type TargetFn = (targets: Target[]) => Target

  interface ChromeRemoteInterfaceOptions {
    host?: string
    port?: number
    secure?: boolean
    useHostName?: boolean
    target?: string | TargetFn
    protocol?: DevtoolsProtocol
    local?: boolean
  }

  interface ProtocolOptions {
    host?: string
    port?: number
    secure?: boolean
    useHostName?: boolean
    local?: boolean
  }

  interface ListTargetOptions {
    host?: string
    port?: number
    secure?: boolean
    useHostName?: boolean
  }

  interface NewTargetOptions {
    host?: string
    port?: number
    secure?: boolean
    useHostName?: boolean
    url?: string
  }

  interface TargetOptions {
    host?: string
    port?: number
    secure?: boolean
    useHostName?: boolean
    url?: string
    id: string
  }

  interface VersionOptions {
    host?: string
    port?: number
    secure?: boolean
    useHostName?: boolean
  }

  interface VersionResult {
    Browser: string
    'Protocol-Version': string
    'User-Agent': string
    'V8-Version': string
    'Webkit-Version': string
    webSocketDebuggerUrl: string
  }

  interface Target {
    description: string
    devtoolsFrontendUrl: string
    id: string
    title: string
    type: string
    url: string
    webSocketDebuggerUrl: string
  }

  interface Type {
    id: string
    description: string
    type: string
    enum?: string[]
  }

  interface Command {
    description: string
    name: string
    experimental: boolean
    parameters?: any[]
    returns?: any[]
  }

  interface Domain {
    domain: string
    experimental: string
    dependencies: string[]
    types: Type[]
    commands: Command[]
  }

  interface DevtoolsProtocol extends Object {
    version: { major: string; minor: string }
    domains: Domain[]
  }
}
